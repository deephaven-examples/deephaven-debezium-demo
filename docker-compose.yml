# docker compose file to run the debezium-kafka ecommerce demo
# with DHC ticking tables and dashboard

version: '3.4'

services:
  redpanda:
    image: docker.vectorized.io/vectorized/redpanda:${REDPANDA_VERSION}
    command:
      - redpanda start
      - --reactor-backend=epoll
      - --overprovisioned
      - --smp ${REDPANDA_SMP}
      - --memory ${REDPANDA_MEMORY}
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr 0.0.0.0:9092
      - --advertise-kafka-addr redpanda:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr redpanda:8082
      - --set redpanda.enable_transactions=true
      - --set redpanda.enable_idempotence=true
    ports:
      - 9092:9092
      - 29092:29092
      - 8081:8081
      - 8082:8082

  mysql:
    image: debezium/example-mysql:${DEBEZIUM_VERSION}
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw

  debezium:
    image: debezium/connect:${DEBEZIUM_VERSION}
    environment:
      BOOTSTRAP_SERVERS: redpanda:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://redpanda:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://redpanda:8081
    ports:
      - '8083:8083'

  loadgen:
    build:
      context: loadgen
      dockerfile: python-Dockerfile
    environment:
      - PAGEVIEWS_PER_SECOND_START=750
      - PURCHASES_PER_SECOND_START=10
      - MAX_PARALLEL_PURCHASES=1
      - MAX_PARALLEL_PAGEVIEWS=1
      - COMMAND_ENDPOINT=0.0.0.0:8090
      - KAFKA_PRODUCER_ACKS
    ports:
      - 8090:8090

  server:
    image: ghcr.io/deephaven/server:${DEEPHAVEN_VERSION:-latest}
    expose:
      - '8080'
    volumes:
      - ./data:/data
      - ./scripts:/scripts
      - api-cache:/cache
    environment:
      - JAVA_TOOL_OPTIONS=-Xmx${DEEPHAVEN_HEAP} -Ddeephaven.console.type=${DEEPHAVEN_CONSOLE_TYPE} -Ddeephaven.application.dir=${DEEPHAVEN_APPLICATION_DIR}

  web:
    image: ghcr.io/deephaven/web:${DEEPHAVEN_VERSION:-latest}
    expose:
      - '80'
    volumes:
      - ./data:/data
      - web-tmp:/tmp

  grpc-proxy:
    image: ghcr.io/deephaven/grpc-proxy:${DEEPHAVEN_VERSION:-latest}
    environment:
      - BACKEND_ADDR=server:8080
    depends_on:
      - server
    expose:
      - '8080'

  envoy:
    image: ghcr.io/deephaven/envoy:${DEEPHAVEN_VERSION:-latest}
    depends_on:
      - web
      - grpc-proxy
      - server
    ports:
      - "${DEEPHAVEN_PORT:-10000}:10000"

volumes:
    web-tmp:
    api-cache:
